// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.887
package data_analysis

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DataAnalysisScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\t// Global variables\n\t\tlet currentFlightData = null;\n\t\tlet currentMarkers = [];\n\t\tlet markerIdCounter = 0;\n\t\tlet maxTime = 100;\n\t\tlet previewUpdateTimeout = null;\n\t\tlet currentFlightId = null;\n\n\t\t// Initialize event listeners\n\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\tsetupEventListeners();\n\t\t\tloadFlights();\n\t\t});\n\n\t\tfunction setupEventListeners() {\n\t\t\tconst fileInput = document.getElementById('fileInput');\n\t\t\tconst uploadButton = document.getElementById('uploadButton');\n\t\t\tconst flightDropdown = document.getElementById('flightDropdown');\n\t\t\tconst loadDataButton = document.getElementById('loadDataButton');\n\t\t\tconst markerTimeSlider = document.getElementById('markerTimeSlider');\n\t\t\tconst previewToggle = document.getElementById('previewToggle');\n\t\t\tconst markerLabelInput = document.getElementById('markerLabelInput');\n\t\t\tconst addMarkerButton = document.getElementById('addMarkerButton');\n\t\t\tconst setTrimStartButton = document.getElementById('setTrimStartButton');\n\t\t\tconst setTrimEndButton = document.getElementById('setTrimEndButton');\n\t\t\tconst createDistanceMarkersButton = document.getElementById('createDistanceMarkersButton');\n\t\t\tconst clearMarkersButton = document.getElementById('clearMarkersButton');\n\t\t\tconst duplicateFlightButton = document.getElementById('duplicateFlightButton');\n\t\t\tconst duplicateFlightTitle = document.getElementById('duplicateFlightTitle');\n\t\t\tconst deleteFlightButton = document.getElementById('deleteFlightButton');\n\t\t\tconst createTrimmedFlightButton = document.getElementById('createTrimmedFlightButton');\n\t\t\tconst trimmedFlightTitle = document.getElementById('trimmedFlightTitle');\n\t\t\tconst refreshFlightsButton = document.getElementById('refreshFlightsButton');\n\t\t\tconst exportAirspeedAltitudeButton = document.getElementById('exportAirspeedAltitudeButton');\n\t\t\tconst exportFullDataButton = document.getElementById('exportFullDataButton');\n\n\t\t\t// File upload events\n\t\t\tuploadButton.addEventListener('click', () => {\n\t\t\t\tfileInput.click();\n\t\t\t});\n\n\t\t\tfileInput.addEventListener('change', (e) => {\n\t\t\t\tif (e.target.files.length > 0) {\n\t\t\t\t\thandleFileUpload(e.target.files[0]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Flight selection events\n\t\t\tflightDropdown.addEventListener('change', () => {\n\t\t\t\tconst hasSelection = !!flightDropdown.value;\n\t\t\t\tloadDataButton.disabled = !hasSelection;\n\t\t\t\tduplicateFlightButton.disabled = !hasSelection;\n\t\t\t\tduplicateFlightTitle.disabled = !hasSelection;\n\t\t\t\tdeleteFlightButton.disabled = !hasSelection;\n\t\t\t\tcreateTrimmedFlightButton.disabled = !hasSelection;\n\t\t\t\ttrimmedFlightTitle.disabled = !hasSelection;\n\t\t\t\texportAirspeedAltitudeButton.disabled = !hasSelection;\n\t\t\t\texportFullDataButton.disabled = !hasSelection;\n\t\t\t\t\n\t\t\t\t// Auto-populate duplicate title\n\t\t\t\tif (hasSelection) {\n\t\t\t\t\tconst selectedOption = flightDropdown.options[flightDropdown.selectedIndex];\n\t\t\t\t\tconst originalTitle = selectedOption.textContent.split(': ')[1]?.split(' (')[0] || 'Flight';\n\t\t\t\t\tduplicateFlightTitle.value = `Copy of ${originalTitle}`;\n\t\t\t\t} else {\n\t\t\t\t\tduplicateFlightTitle.value = '';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tloadDataButton.addEventListener('click', loadFlightData);\n\t\t\tduplicateFlightButton.addEventListener('click', duplicateFlight);\n\t\t\tdeleteFlightButton.addEventListener('click', deleteFlight);\n\t\t\tcreateTrimmedFlightButton.addEventListener('click', createTrimmedFlightFromMarkers);\n\t\t\texportAirspeedAltitudeButton.addEventListener('click', () => exportFlightData('airspeed-altitude'));\n\t\t\texportFullDataButton.addEventListener('click', () => exportFlightData('full'));\n\t\t\tif (refreshFlightsButton) {\n\t\t\t\trefreshFlightsButton.addEventListener('click', loadFlights);\n\t\t\t}\n\n\n\t\t\t// Marker events\n\t\t\tmarkerTimeSlider.addEventListener('input', updateMarkerTimeDisplay);\n\t\t\tmarkerTimeSlider.addEventListener('input', updatePreviewMarker);\n\n\t\t\tpreviewToggle.addEventListener('change', updatePreviewMarker);\n\t\t\taddMarkerButton.addEventListener('click', addMarker);\n\t\t\tsetTrimStartButton.addEventListener('click', setTrimStart);\n\t\t\tsetTrimEndButton.addEventListener('click', setTrimEnd);\n\t\t\tcreateDistanceMarkersButton.addEventListener('click', createDistanceMarkers);\n\t\t\tclearMarkersButton.addEventListener('click', clearMarkers);\n\n\t\t}\n\n\t\tfunction loadFlights() {\n\t\t\tconst dropdown = document.getElementById('flightDropdown');\n\t\t\tdropdown.innerHTML = '<option value=\"\">Loading flights...</option>';\n\t\t\tdropdown.disabled = true;\n\t\t\tdocument.getElementById('loadDataButton').disabled = true;\n\n\t\t\tfetch('/data-analysis/flights')\n\t\t\t.then(response => response.json())\n\t\t\t.then(flights => {\n\t\t\t\tdropdown.innerHTML = '<option value=\"\">Select a flight...</option>';\n\t\t\t\t\n\t\t\t\tif (flights && flights.length > 0) {\n\t\t\t\t\tflights.forEach(flight => {\n\t\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\t\toption.value = flight.id;\n\t\t\t\t\t\toption.textContent = `${flight.id}: ${flight.title} (${flight.flight_number}) - ${flight.start_time}`;\n\t\t\t\t\t\tdropdown.appendChild(option);\n\t\t\t\t\t});\n\t\t\t\t\tdropdown.disabled = false;\n\t\t\t\t\tshowStatus('flightStatus', `${flights.length} flights available`, 'info');\n\t\t\t\t} else {\n\t\t\t\t\tdropdown.innerHTML = '<option value=\"\">No flights found - import data first</option>';\n\t\t\t\t\tshowStatus('flightStatus', 'No flights available. Please import a database or CSV file.', 'info');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Failed to load flights:', error);\n\t\t\t\tdropdown.innerHTML = '<option value=\"\">Error loading flights</option>';\n\t\t\t\tshowStatus('flightStatus', 'Failed to load flights: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction handleFileUpload(file) {\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append('database', file);\n\n\t\t\tshowStatus('flightStatus', 'Uploading and importing database...', 'info');\n\n\t\t\tfetch('/data-analysis/upload', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: formData\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif (data.status === 'success') {\n\t\t\t\t\tshowStatus('flightStatus', data.message, 'success');\n\t\t\t\t\t// Reload flights after successful import\n\t\t\t\t\tloadFlights();\n\t\t\t\t} else {\n\t\t\t\t\tshowStatus('flightStatus', data.message || 'Upload failed', 'error');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Upload failed: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction loadFlightData() {\n\t\t\tconst flightId = document.getElementById('flightDropdown').value;\n\t\t\tif (!flightId) return;\n\n\t\t\tcurrentFlightId = parseInt(flightId);\n\t\t\tshowStatus('flightStatus', 'Loading flight data...', 'info');\n\n\t\t\t// Load flight data and markers in parallel\n\t\t\tPromise.all([\n\t\t\t\tfetch(`/data-analysis/flight-data?flightId=${flightId}`).then(response => response.json()),\n\t\t\t\tfetch(`/data-analysis/markers?flightId=${flightId}`).then(response => response.json())\n\t\t\t])\n\t\t\t.then(([flightData, markers]) => {\n\t\t\t\tcurrentFlightData = flightData;\n\t\t\t\tcurrentMarkers = markers || [];\n\t\t\t\t\n\t\t\t\t// Update marker ID counter to avoid conflicts\n\t\t\t\tmarkerIdCounter = Math.max(0, ...currentMarkers.map(m => m.id || 0)) + 1;\n\t\t\t\t\n\t\t\t\tsetupTimeControls();\n\t\t\t\tshowStatus('flightStatus', `Data loaded for flight ID ${flightId} with ${currentMarkers.length} markers`, 'success');\n\t\t\t\tdocument.getElementById('controlsSection').style.display = 'block';\n\t\t\t\tdocument.getElementById('statisticsSection').style.display = 'block';\n\t\t\t\tdocument.getElementById('visualizationSection').style.display = 'block';\n\t\t\t\t\n\t\t\t\tupdateMarkersTable();\n\t\t\t\tupdateVisualization();\n\t\t\t\tloadStatistics(flightId);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to load flight data: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction setupTimeControls() {\n\t\t\tif (!currentFlightData || !currentFlightData.position_data) return;\n\n\t\t\t// Find maximum time across all aircraft\n\t\t\tmaxTime = 0;\n\t\t\tObject.values(currentFlightData.position_data).forEach(positions => {\n\t\t\t\tif (positions.length > 0) {\n\t\t\t\t\tconst lastTime = positions[positions.length - 1].timestamp_seconds;\n\t\t\t\t\tmaxTime = Math.max(maxTime, lastTime);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Update marker slider\n\t\t\tconst markerTimeSlider = document.getElementById('markerTimeSlider');\n\t\t\tmarkerTimeSlider.min = 0;\n\t\t\tmarkerTimeSlider.max = maxTime;\n\t\t\tmarkerTimeSlider.value = 0;\n\n\t\t\t// Enable controls\n\t\t\tmarkerTimeSlider.disabled = false;\n\t\t\tdocument.getElementById('markerLabelInput').disabled = false;\n\t\t\tdocument.getElementById('addMarkerButton').disabled = false;\n\t\t\tdocument.getElementById('setTrimStartButton').disabled = false;\n\t\t\tdocument.getElementById('setTrimEndButton').disabled = false;\n\t\t\tdocument.getElementById('createDistanceMarkersButton').disabled = false;\n\t\t\tdocument.getElementById('clearMarkersButton').disabled = false;\n\n\t\t\t// Enable trim controls\n\t\t\tdocument.getElementById('trimmedFlightTitle').disabled = false;\n\t\t\tdocument.getElementById('createTrimmedFlightButton').disabled = false;\n\n\t\t\tupdateMarkerTimeDisplay();\n\n\t\t\t// Auto-populate trimmed flight title\n\t\t\tif (currentFlightData && currentFlightData.flight) {\n\t\t\t\tconst originalTitle = currentFlightData.flight.title || 'Flight';\n\t\t\t\tdocument.getElementById('trimmedFlightTitle').value = `Trimmed ${originalTitle}`;\n\t\t\t}\n\t\t}\n\n\n\t\tfunction updateMarkerTimeDisplay() {\n\t\t\tconst time = parseFloat(document.getElementById('markerTimeSlider').value);\n\t\t\tdocument.getElementById('markerTimeDisplay').textContent = `Time: ${time.toFixed(1)}s`;\n\t\t}\n\n\t\tfunction updatePreviewMarker() {\n\t\t\tconst markerTimeSlider = document.getElementById('markerTimeSlider');\n\t\t\tconst previewToggle = document.getElementById('previewToggle');\n\t\t\t\n\t\t\t// Auto-enable preview when slider moves\n\t\t\tif (!previewToggle.checked) {\n\t\t\t\tpreviewToggle.checked = true;\n\t\t\t}\n\t\t\t\n\t\t\t// Debounce the update to reduce lag\n\t\t\tclearTimeout(previewUpdateTimeout);\n\t\t\tpreviewUpdateTimeout = setTimeout(() => {\n\t\t\t\tif (currentFlightData) {\n\t\t\t\t\tupdateMapPreviewMarkerOptimized();\n\t\t\t\t\tupdateAltitudePreviewMarker();\n\t\t\t\t\tupdateAirspeedPreviewMarker();\n\t\t\t\t}\n\t\t\t}, 5); // 5ms debounce\n\t\t}\n\n\t\tfunction addMarker() {\n\t\t\tconst time = parseFloat(document.getElementById('markerTimeSlider').value);\n\t\t\tlet label = document.getElementById('markerLabelInput').value.trim();\n\t\t\t\n\t\t\tif (!label) {\n\t\t\t\tlabel = `Marker ${currentMarkers.length + 1}`;\n\t\t\t}\n\n\t\t\tif (!currentFlightId) {\n\t\t\t\tshowStatus('flightStatus', 'No flight selected', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst markerData = {\n\t\t\t\tflight_id: currentFlightId,\n\t\t\t\ttime: time,\n\t\t\t\tlabel: label\n\t\t\t};\n\n\t\t\t// Save marker to database\n\t\t\tfetch('/data-analysis/markers', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(markerData)\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(savedMarker => {\n\t\t\t\t// Add to local array\n\t\t\t\tcurrentMarkers.push(savedMarker);\n\t\t\t\tcurrentMarkers.sort((a, b) => a.time - b.time);\n\n\t\t\t\tdocument.getElementById('markerLabelInput').value = '';\n\t\t\t\tdocument.getElementById('previewToggle').checked = false;\n\t\t\t\t\n\t\t\t\tupdateMarkersTable();\n\t\t\t\tupdateVisualization();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to save marker: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction removeMarker(markerId) {\n\t\t\t// Delete from database\n\t\t\tfetch(`/data-analysis/markers?id=${markerId}`, {\n\t\t\t\tmethod: 'DELETE'\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(() => {\n\t\t\t\t// Remove from local array\n\t\t\t\tcurrentMarkers = currentMarkers.filter(m => m.id !== markerId);\n\t\t\t\tupdateMarkersTable();\n\t\t\t\tupdateVisualization();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to delete marker: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction clearMarkers() {\n\t\t\tif (currentMarkers.length === 0) return;\n\t\t\t\n\t\t\t// Delete all markers from database\n\t\t\tconst deletePromises = currentMarkers.map(marker => \n\t\t\t\tfetch(`/data-analysis/markers?id=${marker.id}`, { method: 'DELETE' })\n\t\t\t);\n\t\t\t\n\t\t\tPromise.all(deletePromises)\n\t\t\t.then(() => {\n\t\t\t\tcurrentMarkers = [];\n\t\t\t\tupdateMarkersTable();\n\t\t\t\tupdateVisualization();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to clear markers: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction updateMarkersTable() {\n\t\t\tconst tbody = document.getElementById('markersTableBody');\n\t\t\tconst table = document.getElementById('markersTable');\n\t\t\t\n\t\t\ttbody.innerHTML = '';\n\t\t\t\n\t\t\tif (currentMarkers.length === 0) {\n\t\t\t\ttable.style.display = 'none';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\ttable.style.display = 'table';\n\t\t\t\n\t\t\tcurrentMarkers.forEach(marker => {\n\t\t\t\tconst row = document.createElement('tr');\n\t\t\t\t\n\t\t\t\t// Style row based on marker type\n\t\t\t\tlet rowStyle = '';\n\t\t\t\tlet markerIcon = '';\n\t\t\t\tlet removeButton = `<button onclick=\"removeMarker(${marker.id})\">Remove</button>`;\n\t\t\t\t\n\t\t\t\tif (marker.type === 'trim_start') {\n\t\t\t\t\trowStyle = 'background-color: #d4edda; border-left: 4px solid #28a745;';\n\t\t\t\t\tmarkerIcon = '🟢 ';\n\t\t\t\t\tremoveButton = `<button onclick=\"removeMarker(${marker.id})\" style=\"background-color: #28a745; color: white;\">Remove</button>`;\n\t\t\t\t} else if (marker.type === 'trim_end') {\n\t\t\t\t\trowStyle = 'background-color: #f8d7da; border-left: 4px solid #dc3545;';\n\t\t\t\t\tmarkerIcon = '🔴 ';\n\t\t\t\t\tremoveButton = `<button onclick=\"removeMarker(${marker.id})\" style=\"background-color: #dc3545; color: white;\">Remove</button>`;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trow.style.cssText = rowStyle;\n\t\t\t\trow.innerHTML = `\n\t\t\t\t\t<td>${marker.time.toFixed(1)}</td>\n\t\t\t\t\t<td>${markerIcon}${marker.label}</td>\n\t\t\t\t\t<td>${removeButton}</td>\n\t\t\t\t`;\n\t\t\t\ttbody.appendChild(row);\n\t\t\t});\n\t\t}\n\n\t\tfunction updateVisualization() {\n\t\t\tif (!currentFlightData) return;\n\n\t\t\tconst previewTime = document.getElementById('previewToggle').checked ? \n\t\t\t\tparseFloat(document.getElementById('markerTimeSlider').value) : null;\n\n\t\t\tupdateAltitudeGraph(0, maxTime, previewTime);\n\t\t\tupdateMapGraph(0, maxTime, previewTime);\n\t\t\tupdateAirspeedGraph(0, maxTime, previewTime);\n\t\t}\n\n\t\tfunction updateMapPreviewMarkerOptimized() {\n\t\t\tif (!currentFlightData) return;\n\t\t\t\n\t\t\tconst previewTime = document.getElementById('previewToggle').checked ? \n\t\t\t\tparseFloat(document.getElementById('markerTimeSlider').value) : null;\n\t\t\t\n\t\t\t// Get current map data\n\t\t\tconst mapDiv = document.getElementById('mapGraph');\n\t\t\tif (!mapDiv || !mapDiv.data) return;\n\t\t\t\n\t\t\t// Create filtered positions using full data range\n\t\t\tconst allFilteredPositions = {};\n\t\t\tObject.entries(currentFlightData.position_data || {}).forEach(([aircraftLabel, positions]) => {\n\t\t\t\tallFilteredPositions[aircraftLabel] = positions.filter(p => \n\t\t\t\t\tp.latitude && p.longitude && p.latitude !== 0 && p.longitude !== 0\n\t\t\t\t);\n\t\t\t});\n\t\t\t\n\t\t\t// Remove existing preview markers (they have names starting with \"Preview\")\n\t\t\tconst filteredTraces = mapDiv.data.filter(trace => \n\t\t\t\t!trace.name || !trace.name.startsWith('Preview')\n\t\t\t);\n\t\t\t\n\t\t\t// Add new preview marker if enabled and in range\n\t\t\tif (previewTime !== null && previewTime >= 0 && previewTime <= maxTime) {\n\t\t\t\tconst previewPositions = interpolatePositionsAtTimeOptimized(allFilteredPositions, previewTime);\n\t\t\t\tif (previewPositions.length > 0) {\n\t\t\t\t\tfilteredTraces.push({\n\t\t\t\t\t\ttype: 'scattermapbox',\n\t\t\t\t\t\tlat: previewPositions.map(p => p.lat),\n\t\t\t\t\t\tlon: previewPositions.map(p => p.lon),\n\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tsize: 12, \n\t\t\t\t\t\t\tcolor: 'teal',\n\t\t\t\t\t\t\tsymbol: 'circle'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: `Preview (${previewTime.toFixed(1)}s)`,\n\t\t\t\t\t\ttext: previewPositions.map(p => `Preview\\n${p.aircraftLabel}\\nTime: ${previewTime.toFixed(1)}s`),\n\t\t\t\t\t\thoverinfo: 'text',\n\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Update the plot without redrawing (use Plotly.react for efficiency)\n\t\t\tPlotly.react('mapGraph', filteredTraces, mapDiv.layout);\n\t\t}\n\n\t\tfunction updateAltitudePreviewMarker() {\n\t\t\tif (!currentFlightData) return;\n\t\t\t\n\t\t\tconst previewTime = document.getElementById('previewToggle').checked ? \n\t\t\t\tparseFloat(document.getElementById('markerTimeSlider').value) : null;\n\t\t\t\n\t\t\t// Get current altitude graph data\n\t\t\tconst altDiv = document.getElementById('altitudeGraph');\n\t\t\tif (!altDiv || !altDiv.data) return;\n\t\t\t\n\t\t\t// Remove existing preview markers\n\t\t\tconst filteredTraces = altDiv.data.filter(trace => \n\t\t\t\t!trace.name || !trace.name.startsWith('Preview')\n\t\t\t);\n\t\t\t\n\t\t\t// Find max altitude for preview line\n\t\t\tlet maxAltitude = 0;\n\t\t\tObject.entries(currentFlightData.position_data || {}).forEach(([aircraftLabel, positions]) => {\n\t\t\t\tconst filteredPositions = positions.filter(p => p.altitude);\n\t\t\t\tif (filteredPositions.length > 0) {\n\t\t\t\t\tconst altitudes = filteredPositions.map(p => p.altitude);\n\t\t\t\t\tmaxAltitude = Math.max(maxAltitude, ...altitudes);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Add new preview marker if enabled and in range\n\t\t\tif (previewTime !== null && previewTime >= 0 && previewTime <= maxTime) {\n\t\t\t\tfilteredTraces.push({\n\t\t\t\t\tx: [previewTime, previewTime],\n\t\t\t\t\ty: [0, maxAltitude * 1.1],\n\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\tmode: 'lines',\n\t\t\t\t\tline: { color: 'teal', dash: 'dot', width: 2 },\n\t\t\t\t\tname: `Preview (${previewTime.toFixed(1)}s)`,\n\t\t\t\t\tshowlegend: false\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Update the plot without redrawing\n\t\t\tPlotly.react('altitudeGraph', filteredTraces, altDiv.layout);\n\t\t}\n\n\t\tfunction updateAirspeedPreviewMarker() {\n\t\t\tif (!currentFlightData) return;\n\t\t\t\n\t\t\tconst previewTime = document.getElementById('previewToggle').checked ? \n\t\t\t\tparseFloat(document.getElementById('markerTimeSlider').value) : null;\n\t\t\t\n\t\t\t// Get current airspeed graph data\n\t\t\tconst airspeedDiv = document.getElementById('airspeedGraph');\n\t\t\tif (!airspeedDiv || !airspeedDiv.data) return;\n\t\t\t\n\t\t\t// Remove existing preview markers\n\t\t\tconst filteredTraces = airspeedDiv.data.filter(trace => \n\t\t\t\t!trace.name || !trace.name.startsWith('Preview')\n\t\t\t);\n\t\t\t\n\t\t\t// Find max airspeed for preview line\n\t\t\tlet maxAirspeed = 0;\n\t\t\tObject.entries(currentFlightData.position_data || {}).forEach(([aircraftLabel, positions]) => {\n\t\t\t\tconst filteredPositions = positions.filter(p => p.airspeed);\n\t\t\t\tif (filteredPositions.length > 0) {\n\t\t\t\t\tconst airspeeds = filteredPositions.map(p => p.airspeed);\n\t\t\t\t\tmaxAirspeed = Math.max(maxAirspeed, ...airspeeds);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Add new preview marker if enabled and in range\n\t\t\tif (previewTime !== null && previewTime >= 0 && previewTime <= maxTime) {\n\t\t\t\tfilteredTraces.push({\n\t\t\t\t\tx: [previewTime, previewTime],\n\t\t\t\t\ty: [0, maxAirspeed * 1.1],\n\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\tmode: 'lines',\n\t\t\t\t\tline: { color: 'teal', dash: 'dot', width: 2 },\n\t\t\t\t\tname: `Preview (${previewTime.toFixed(1)}s)`,\n\t\t\t\t\tshowlegend: false\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Update the plot without redrawing\n\t\t\tPlotly.react('airspeedGraph', filteredTraces, airspeedDiv.layout);\n\t\t}\n\n\t\tfunction updateAltitudeGraph(startTime, endTime, previewTime) {\n\t\t\tconst traces = [];\n\t\t\tconst flightTitle = currentFlightData.flight ? currentFlightData.flight.title : 'Unknown Flight';\n\t\t\tlet maxAltitude = 0;\n\n\t\t\tObject.entries(currentFlightData.position_data || {}).forEach(([aircraftLabel, positions]) => {\n\t\t\t\tconst filteredPositions = positions.filter(p => \n\t\t\t\t\tp.timestamp_seconds >= startTime && p.timestamp_seconds <= endTime && p.altitude\n\t\t\t\t);\n\n\t\t\t\tif (filteredPositions.length > 0) {\n\t\t\t\t\tconst altitudes = filteredPositions.map(p => p.altitude);\n\t\t\t\t\tmaxAltitude = Math.max(maxAltitude, ...altitudes);\n\t\t\t\t\t\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\tx: filteredPositions.map(p => p.timestamp_seconds),\n\t\t\t\t\t\ty: altitudes,\n\t\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\t\tmode: 'lines',\n\t\t\t\t\t\tname: aircraftLabel\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add markers\n\t\t\tcurrentMarkers.forEach(marker => {\n\t\t\t\tif (marker.time >= startTime && marker.time <= endTime) {\n\t\t\t\t\tlet lineColor = 'red';\n\t\t\t\t\tlet lineWidth = 1;\n\t\t\t\t\t\n\t\t\t\t\tif (marker.type === 'trim_start') {\n\t\t\t\t\t\tlineColor = '#28a745'; // Green for trim start\n\t\t\t\t\t\tlineWidth = 2;\n\t\t\t\t\t} else if (marker.type === 'trim_end') {\n\t\t\t\t\t\tlineColor = '#dc3545'; // Red for trim end\n\t\t\t\t\t\tlineWidth = 2;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\tx: [marker.time, marker.time],\n\t\t\t\t\t\ty: [0, maxAltitude * 1.1],\n\t\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\t\tmode: 'lines',\n\t\t\t\t\t\tline: { color: lineColor, dash: 'dash', width: lineWidth },\n\t\t\t\t\t\tname: marker.label,\n\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add preview marker\n\t\t\tif (previewTime !== null && previewTime >= startTime && previewTime <= endTime) {\n\t\t\t\ttraces.push({\n\t\t\t\t\tx: [previewTime, previewTime],\n\t\t\t\t\ty: [0, maxAltitude * 1.1],\n\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\tmode: 'lines',\n\t\t\t\t\tline: { color: 'teal', dash: 'dot', width: 1 },\n\t\t\t\t\tname: `Preview (${previewTime.toFixed(1)}s)`,\n\t\t\t\t\tshowlegend: false\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst layout = {\n\t\t\t\ttitle: `Altitude for ${flightTitle}`,\n\t\t\t\txaxis: { title: 'Time (seconds)' },\n\t\t\t\tyaxis: { title: 'Altitude (meters)' },\n\t\t\t\theight: 400\n\t\t\t};\n\n\t\t\tPlotly.newPlot('altitudeGraph', traces, layout);\n\t\t}\n\n\t\tfunction updateMapGraph(startTime, endTime, previewTime) {\n\t\t\tconst traces = [];\n\t\t\tconst flightTitle = currentFlightData.flight ? currentFlightData.flight.title : 'Unknown Flight';\n\t\t\tlet bounds = { minLat: 90, maxLat: -90, minLon: 180, maxLon: -180 };\n\t\t\tlet hasValidData = false;\n\t\t\tlet allFilteredPositions = {}; // Store for marker interpolation\n\n\t\t\tObject.entries(currentFlightData.position_data || {}).forEach(([aircraftLabel, positions]) => {\n\t\t\t\tconst filteredPositions = positions.filter(p => \n\t\t\t\t\tp.timestamp_seconds >= startTime && p.timestamp_seconds <= endTime && \n\t\t\t\t\tp.latitude && p.longitude && p.latitude !== 0 && p.longitude !== 0\n\t\t\t\t);\n\n\t\t\t\tallFilteredPositions[aircraftLabel] = filteredPositions;\n\n\t\t\t\tif (filteredPositions.length > 0) {\n\t\t\t\t\thasValidData = true;\n\t\t\t\t\t\n\t\t\t\t\t// Update bounds\n\t\t\t\t\tfilteredPositions.forEach(p => {\n\t\t\t\t\t\tbounds.minLat = Math.min(bounds.minLat, p.latitude);\n\t\t\t\t\t\tbounds.maxLat = Math.max(bounds.maxLat, p.latitude);\n\t\t\t\t\t\tbounds.minLon = Math.min(bounds.minLon, p.longitude);\n\t\t\t\t\t\tbounds.maxLon = Math.max(bounds.maxLon, p.longitude);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Flight path\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\ttype: 'scattermapbox',\n\t\t\t\t\t\tlat: filteredPositions.map(p => p.latitude),\n\t\t\t\t\t\tlon: filteredPositions.map(p => p.longitude),\n\t\t\t\t\t\tmode: 'lines',\n\t\t\t\t\t\tname: aircraftLabel,\n\t\t\t\t\t\tline: { width: 2 }\n\t\t\t\t\t});\n\n\t\t\t\t\t// Start and end points\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\ttype: 'scattermapbox',\n\t\t\t\t\t\tlat: [filteredPositions[0].latitude],\n\t\t\t\t\t\tlon: [filteredPositions[0].longitude],\n\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\tmarker: { size: 10, color: 'green' },\n\t\t\t\t\t\tname: 'Start',\n\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t});\n\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\ttype: 'scattermapbox',\n\t\t\t\t\t\tlat: [filteredPositions[filteredPositions.length - 1].latitude],\n\t\t\t\t\t\tlon: [filteredPositions[filteredPositions.length - 1].longitude],\n\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\tmarker: { size: 10, color: 'red' },\n\t\t\t\t\t\tname: 'End',\n\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add markers to the map\n\t\t\tcurrentMarkers.forEach((marker, index) => {\n\t\t\t\tif (marker.time >= startTime && marker.time <= endTime) {\n\t\t\t\t\tconst markerPositions = interpolatePositionsAtTime(allFilteredPositions, marker.time);\n\n\t\t\t\t\tif (markerPositions.length > 0) {\n\t\t\t\t\t\t// Create a separate trace for each aircraft position to avoid clustering issues\n\t\t\t\t\t\tmarkerPositions.forEach((pos, posIndex) => {\n\t\t\t\t\t\t\ttraces.push({\n\t\t\t\t\t\t\t\ttype: 'scattermapbox',\n\t\t\t\t\t\t\t\tlat: [pos.lat],\n\t\t\t\t\t\t\t\tlon: [pos.lon],\n\t\t\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\t\t\tsize: 15, \n\t\t\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t\t\t\tsymbol: 'circle',\n\t\t\t\t\t\t\t\t\tline: { color: 'darkred', width: 2 }\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tname: `${marker.label}_${index}_${posIndex}`, // Unique name\n\t\t\t\t\t\t\t\ttext: [`${marker.label}\\n${pos.aircraftLabel}\\nTime: ${marker.time.toFixed(1)}s`],\n\t\t\t\t\t\t\t\thoverinfo: 'text',\n\t\t\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add preview marker to the map\n\t\t\tif (previewTime !== null && previewTime >= startTime && previewTime <= endTime) {\n\t\t\t\tconst previewPositions = interpolatePositionsAtTime(allFilteredPositions, previewTime);\n\t\t\t\tif (previewPositions.length > 0) {\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\ttype: 'scattermapbox',\n\t\t\t\t\t\tlat: previewPositions.map(p => p.lat),\n\t\t\t\t\t\tlon: previewPositions.map(p => p.lon),\n\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\tmarker: { \n\t\t\t\t\t\t\tsize: 12, \n\t\t\t\t\t\t\tcolor: 'teal',\n\t\t\t\t\t\t\tsymbol: 'circle'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: `Preview (${previewTime.toFixed(1)}s)`,\n\t\t\t\t\t\ttext: previewPositions.map(p => `Preview\\n${p.aircraftLabel}\\nTime: ${previewTime.toFixed(1)}s`),\n\t\t\t\t\t\thoverinfo: 'text',\n\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet center = { lat: 0, lon: 0 };\n\t\t\tlet zoom = 1;\n\n\t\t\tif (hasValidData) {\n\t\t\t\tcenter = {\n\t\t\t\t\tlat: (bounds.minLat + bounds.maxLat) / 2,\n\t\t\t\t\tlon: (bounds.minLon + bounds.maxLon) / 2\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tconst latRange = bounds.maxLat - bounds.minLat;\n\t\t\t\tconst lonRange = bounds.maxLon - bounds.minLon;\n\t\t\t\tconst maxRange = Math.max(latRange, lonRange);\n\t\t\t\t\n\t\t\t\tif (maxRange < 0.01) zoom = 15;\n\t\t\t\telse if (maxRange < 0.05) zoom = 12;\n\t\t\t\telse if (maxRange < 0.1) zoom = 10;\n\t\t\t\telse if (maxRange < 0.5) zoom = 8;\n\t\t\t\telse if (maxRange < 1) zoom = 7;\n\t\t\t\telse if (maxRange < 5) zoom = 5;\n\t\t\t\telse zoom = 4;\n\t\t\t}\n\n\t\t\tconst layout = {\n\t\t\t\ttitle: `GPS Track for ${flightTitle}`,\n\t\t\t\tmapbox: {\n\t\t\t\t\tstyle: 'open-street-map',\n\t\t\t\t\tcenter: center,\n\t\t\t\t\tzoom: zoom\n\t\t\t\t},\n\t\t\t\tmargin: { l: 0, r: 0, t: 40, b: 0 },\n\t\t\t\theight: 600,\n\t\t\t\twidth: null, // Use container width\n\t\t\t\tautosize: true\n\t\t\t};\n\n\t\t\tPlotly.newPlot('mapGraph', traces, layout, {responsive: true});\n\t\t\t\n\t\t\t// Ensure map resizes properly\n\t\t\tsetTimeout(() => {\n\t\t\t\tPlotly.Plots.resize('mapGraph');\n\t\t\t}, 100);\n\t\t}\n\n\t\tfunction updateAirspeedGraph(startTime, endTime, previewTime) {\n\t\t\tconst traces = [];\n\t\t\tconst flightTitle = currentFlightData.flight ? currentFlightData.flight.title : 'Unknown Flight';\n\t\t\tlet maxAirspeed = 0;\n\n\t\t\tObject.entries(currentFlightData.position_data || {}).forEach(([aircraftLabel, positions]) => {\n\t\t\t\tconst filteredPositions = positions.filter(p => \n\t\t\t\t\tp.timestamp_seconds >= startTime && p.timestamp_seconds <= endTime && p.airspeed\n\t\t\t\t);\n\n\t\t\t\tif (filteredPositions.length > 0) {\n\t\t\t\t\tconst airspeeds = filteredPositions.map(p => p.airspeed);\n\t\t\t\t\tmaxAirspeed = Math.max(maxAirspeed, ...airspeeds);\n\t\t\t\t\t\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\tx: filteredPositions.map(p => p.timestamp_seconds),\n\t\t\t\t\t\ty: airspeeds,\n\t\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\t\tmode: 'lines',\n\t\t\t\t\t\tname: aircraftLabel\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add markers\n\t\t\tcurrentMarkers.forEach(marker => {\n\t\t\t\tif (marker.time >= startTime && marker.time <= endTime) {\n\t\t\t\t\tlet lineColor = 'red';\n\t\t\t\t\tlet lineWidth = 1;\n\t\t\t\t\t\n\t\t\t\t\tif (marker.type === 'trim_start') {\n\t\t\t\t\t\tlineColor = '#28a745'; // Green for trim start\n\t\t\t\t\t\tlineWidth = 2;\n\t\t\t\t\t} else if (marker.type === 'trim_end') {\n\t\t\t\t\t\tlineColor = '#dc3545'; // Red for trim end\n\t\t\t\t\t\tlineWidth = 2;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttraces.push({\n\t\t\t\t\t\tx: [marker.time, marker.time],\n\t\t\t\t\t\ty: [0, maxAirspeed * 1.1],\n\t\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\t\tmode: 'lines',\n\t\t\t\t\t\tline: { color: lineColor, dash: 'dash', width: lineWidth },\n\t\t\t\t\t\tname: marker.label,\n\t\t\t\t\t\tshowlegend: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add preview marker\n\t\t\tif (previewTime !== null && previewTime >= startTime && previewTime <= endTime) {\n\t\t\t\ttraces.push({\n\t\t\t\t\tx: [previewTime, previewTime],\n\t\t\t\t\ty: [0, maxAirspeed * 1.1],\n\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\tmode: 'lines',\n\t\t\t\t\tline: { color: 'teal', dash: 'dot', width: 1 },\n\t\t\t\t\tname: `Preview (${previewTime.toFixed(1)}s)`,\n\t\t\t\t\tshowlegend: false\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst layout = {\n\t\t\t\ttitle: `Airspeed for ${flightTitle}`,\n\t\t\t\txaxis: { title: 'Time (seconds)' },\n\t\t\t\tyaxis: { title: 'Airspeed (m/s)' },\n\t\t\t\theight: 400\n\t\t\t};\n\n\t\t\tPlotly.newPlot('airspeedGraph', traces, layout);\n\t\t}\n\n\t\tfunction showTab(tabName) {\n\t\t\t// Hide all tabs\n\t\t\tdocument.querySelectorAll('.tab-content').forEach(tab => {\n\t\t\t\ttab.classList.remove('active');\n\t\t\t});\n\t\t\t\n\t\t\tdocument.querySelectorAll('.tab').forEach(tab => {\n\t\t\t\ttab.classList.remove('active');\n\t\t\t});\n\t\t\t\n\t\t\t// Show selected tab\n\t\t\tdocument.getElementById(tabName + '-tab').classList.add('active');\n\t\t\tevent.target.classList.add('active');\n\t\t\t\n\t\t\t// Resize map when map tab is shown\n\t\t\tif (tabName === 'map') {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tPlotly.Plots.resize('mapGraph');\n\t\t\t\t}, 100);\n\t\t\t}\n\t\t}\n\n\t\tfunction interpolatePositionsAtTimeOptimized(allFilteredPositions, targetTime) {\n\t\t\tconst positions = [];\n\t\t\t\n\t\t\tObject.entries(allFilteredPositions).forEach(([aircraftLabel, aircraftPositions]) => {\n\t\t\t\tif (aircraftPositions.length === 0) return;\n\t\t\t\t\n\t\t\t\t// Binary search for more efficient index finding\n\t\t\t\tlet beforeIdx = -1;\n\t\t\t\tlet afterIdx = -1;\n\t\t\t\t\n\t\t\t\t// Use binary search for better performance on large datasets\n\t\t\t\tlet left = 0;\n\t\t\t\tlet right = aircraftPositions.length - 1;\n\t\t\t\t\n\t\t\t\twhile (left <= right) {\n\t\t\t\t\tconst mid = Math.floor((left + right) / 2);\n\t\t\t\t\tconst midTime = aircraftPositions[mid].timestamp_seconds;\n\t\t\t\t\t\n\t\t\t\t\tif (midTime <= targetTime) {\n\t\t\t\t\t\tbeforeIdx = mid;\n\t\t\t\t\t\tleft = mid + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafterIdx = mid;\n\t\t\t\t\t\tright = mid - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet position = null;\n\t\t\t\t\n\t\t\t\tif (beforeIdx === -1 && afterIdx === -1) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (beforeIdx === -1) {\n\t\t\t\t\tposition = aircraftPositions[afterIdx];\n\t\t\t\t} else if (afterIdx === -1) {\n\t\t\t\t\tposition = aircraftPositions[beforeIdx];\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate\n\t\t\t\t\tconst before = aircraftPositions[beforeIdx];\n\t\t\t\t\tconst after = aircraftPositions[afterIdx];\n\t\t\t\t\t\n\t\t\t\t\tconst timeDiff = after.timestamp_seconds - before.timestamp_seconds;\n\t\t\t\t\tif (timeDiff === 0) {\n\t\t\t\t\t\tposition = before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ratio = (targetTime - before.timestamp_seconds) / timeDiff;\n\t\t\t\t\t\tposition = {\n\t\t\t\t\t\t\tlatitude: before.latitude + (after.latitude - before.latitude) * ratio,\n\t\t\t\t\t\t\tlongitude: before.longitude + (after.longitude - before.longitude) * ratio,\n\t\t\t\t\t\t\ttimestamp_seconds: targetTime\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (position && position.latitude && position.longitude && \n\t\t\t\t\tposition.latitude !== 0 && position.longitude !== 0) {\n\t\t\t\t\tpositions.push({\n\t\t\t\t\t\tlat: position.latitude,\n\t\t\t\t\t\tlon: position.longitude,\n\t\t\t\t\t\taircraftLabel: aircraftLabel\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn positions;\n\t\t}\n\n\t\tfunction interpolatePositionsAtTime(allFilteredPositions, targetTime) {\n\t\t\tconst positions = [];\n\t\t\t\n\t\t\tObject.entries(allFilteredPositions).forEach(([aircraftLabel, aircraftPositions]) => {\n\t\t\t\tif (aircraftPositions.length === 0) return;\n\t\t\t\t\n\t\t\t\t// Find the position at the target time using interpolation\n\t\t\t\tlet position = null;\n\t\t\t\t\n\t\t\t\t// Find the closest positions before and after the target time\n\t\t\t\tlet beforeIdx = -1;\n\t\t\t\tlet afterIdx = -1;\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < aircraftPositions.length; i++) {\n\t\t\t\t\tif (aircraftPositions[i].timestamp_seconds <= targetTime) {\n\t\t\t\t\t\tbeforeIdx = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafterIdx = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (beforeIdx === -1 && afterIdx === -1) {\n\t\t\t\t\t// No valid positions\n\t\t\t\t\treturn;\n\t\t\t\t} else if (beforeIdx === -1) {\n\t\t\t\t\t// Use first position\n\t\t\t\t\tposition = aircraftPositions[afterIdx];\n\t\t\t\t} else if (afterIdx === -1) {\n\t\t\t\t\t// Use last position\n\t\t\t\t\tposition = aircraftPositions[beforeIdx];\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate between before and after positions\n\t\t\t\t\tconst before = aircraftPositions[beforeIdx];\n\t\t\t\t\tconst after = aircraftPositions[afterIdx];\n\t\t\t\t\t\n\t\t\t\t\tconst timeDiff = after.timestamp_seconds - before.timestamp_seconds;\n\t\t\t\t\tif (timeDiff === 0) {\n\t\t\t\t\t\tposition = before;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ratio = (targetTime - before.timestamp_seconds) / timeDiff;\n\t\t\t\t\t\t\n\t\t\t\t\t\tposition = {\n\t\t\t\t\t\t\tlatitude: before.latitude + (after.latitude - before.latitude) * ratio,\n\t\t\t\t\t\t\tlongitude: before.longitude + (after.longitude - before.longitude) * ratio,\n\t\t\t\t\t\t\ttimestamp_seconds: targetTime\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (position && position.latitude && position.longitude && \n\t\t\t\t\tposition.latitude !== 0 && position.longitude !== 0) {\n\t\t\t\t\tpositions.push({\n\t\t\t\t\t\tlat: position.latitude,\n\t\t\t\t\t\tlon: position.longitude,\n\t\t\t\t\t\taircraftLabel: aircraftLabel\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn positions;\n\t\t}\n\n\t\tfunction createDistanceMarkers() {\n\t\t\tif (!currentFlightId) {\n\t\t\t\tshowStatus('flightStatus', 'No flight selected', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst button = document.getElementById('createDistanceMarkersButton');\n\t\t\tbutton.disabled = true;\n\t\t\tbutton.textContent = 'Creating Markers...';\n\n\t\t\tshowStatus('flightStatus', 'Creating distance markers for 9nm from Currock Hill...', 'info');\n\n\t\t\tfetch(`/data-analysis/distance-markers?flightId=${currentFlightId}`, {\n\t\t\t\tmethod: 'POST'\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif (data.status === 'success') {\n\t\t\t\t\tshowStatus('flightStatus', data.message, 'success');\n\t\t\t\t\t// Reload markers to show the new distance markers\n\t\t\t\t\tloadMarkers();\n\t\t\t\t} else {\n\t\t\t\t\tshowStatus('flightStatus', data.message || 'Failed to create distance markers', 'error');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to create distance markers: ' + error.message, 'error');\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tbutton.disabled = false;\n\t\t\t\tbutton.textContent = 'Create 9nm Distance Markers';\n\t\t\t});\n\t\t}\n\n\t\tfunction loadMarkers() {\n\t\t\tif (!currentFlightId) return;\n\n\t\t\tfetch(`/data-analysis/markers?flightId=${currentFlightId}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(markers => {\n\t\t\t\tcurrentMarkers = markers || [];\n\t\t\t\t// Update marker ID counter to avoid conflicts\n\t\t\t\tmarkerIdCounter = Math.max(0, ...currentMarkers.map(m => m.id || 0)) + 1;\n\t\t\t\tupdateMarkersTable();\n\t\t\t\tupdateVisualization();\n\t\t\t\t// Load trim markers and sync with trim sliders\n\t\t\t\tloadTrimMarkers();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Failed to load markers:', error);\n\t\t\t});\n\t\t}\n\n\t\tfunction setTrimStart() {\n\t\t\tconst time = parseFloat(document.getElementById('markerTimeSlider').value);\n\t\t\tcreateTrimMarker('trim_start', time, 'Trim Start');\n\t\t}\n\n\t\tfunction setTrimEnd() {\n\t\t\tconst time = parseFloat(document.getElementById('markerTimeSlider').value);\n\t\t\tcreateTrimMarker('trim_end', time, 'Trim End');\n\t\t}\n\n\t\tfunction createTrimMarker(type, time, label) {\n\t\t\tif (!currentFlightId) {\n\t\t\t\tshowStatus('flightStatus', 'No flight selected', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfetch('/data-analysis/trim-markers', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tflight_id: currentFlightId,\n\t\t\t\t\ttype: type,\n\t\t\t\t\ttime: time,\n\t\t\t\t\tlabel: label\n\t\t\t\t})\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif (data.id) {\n\t\t\t\t\t// Successfully created/updated trim marker\n\t\t\t\t\tloadMarkers();\n\t\t\t\t\t// Update trim sliders based on trim markers\n\t\t\t\t\tupdateTrimSlidersFromMarkers();\n\t\t\t\t\tshowStatus('flightStatus', `${label} set at ${time.toFixed(1)}s`, 'success');\n\t\t\t\t} else {\n\t\t\t\t\tshowStatus('flightStatus', data.message || 'Failed to create trim marker', 'error');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to create trim marker: ' + error.message, 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction loadTrimMarkers() {\n\t\t\tif (!currentFlightId) return;\n\n\t\t\tfetch(`/data-analysis/trim-markers?flightId=${currentFlightId}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\t// Update trim sliders based on loaded trim markers\n\t\t\t\tif (data.trim_start) {\n\t\t\t\t\tdocument.getElementById('trimRangeStart').value = data.trim_start.time;\n\t\t\t\t}\n\t\t\t\tif (data.trim_end) {\n\t\t\t\t\tdocument.getElementById('trimRangeEnd').value = data.trim_end.time;\n\t\t\t\t}\n\t\t\t\t// Update trim range display\n\t\t\t\tupdateTrimRange();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Failed to load trim markers:', error);\n\t\t\t});\n\t\t}\n\n\t\tfunction updateTrimSlidersFromMarkers() {\n\t\t\t// Find trim markers in current markers\n\t\t\tconst trimStart = currentMarkers.find(m => m.type === 'trim_start');\n\t\t\tconst trimEnd = currentMarkers.find(m => m.type === 'trim_end');\n\n\t\t\tif (trimStart) {\n\t\t\t\tdocument.getElementById('trimRangeStart').value = trimStart.time;\n\t\t\t}\n\t\t\tif (trimEnd) {\n\t\t\t\tdocument.getElementById('trimRangeEnd').value = trimEnd.time;\n\t\t\t}\n\n\t\t\t// Update trim range display\n\t\t\tupdateTrimRange();\n\t\t}\n\n\t\tfunction duplicateFlight() {\n\t\t\tconst flightId = document.getElementById('flightDropdown').value;\n\t\t\tconst newTitle = document.getElementById('duplicateFlightTitle').value.trim();\n\t\t\t\n\t\t\tif (!flightId) {\n\t\t\t\tshowStatus('flightStatus', 'No flight selected', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (!newTitle) {\n\t\t\t\tshowStatus('flightStatus', 'Please enter a name for the duplicate flight', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst button = document.getElementById('duplicateFlightButton');\n\t\t\tconst input = document.getElementById('duplicateFlightTitle');\n\t\t\tbutton.disabled = true;\n\t\t\tinput.disabled = true;\n\t\t\tbutton.textContent = 'Duplicating...';\n\n\t\t\tshowStatus('flightStatus', 'Duplicating flight...', 'info');\n\n\t\t\tfetch('/data-analysis/duplicate-flight', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tflight_id: parseInt(flightId),\n\t\t\t\t\tnew_title: newTitle\n\t\t\t\t})\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif (data.status === 'success') {\n\t\t\t\t\tshowStatus('flightStatus', data.message, 'success');\n\t\t\t\t\t// Reload flights to show the new duplicate\n\t\t\t\t\tloadFlights();\n\t\t\t\t\t// Clear the input field\n\t\t\t\t\tinput.value = '';\n\t\t\t\t} else {\n\t\t\t\t\tshowStatus('flightStatus', data.message || 'Failed to duplicate flight', 'error');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to duplicate flight: ' + error.message, 'error');\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tbutton.disabled = false;\n\t\t\t\tinput.disabled = false;\n\t\t\t\tbutton.textContent = 'Duplicate Flight';\n\t\t\t});\n\t\t}\n\n\t\tfunction deleteFlight() {\n\t\t\tconst flightId = document.getElementById('flightDropdown').value;\n\t\t\t\n\t\t\tif (!flightId) {\n\t\t\t\tshowStatus('flightStatus', 'No flight selected', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get flight title for confirmation dialog\n\t\t\tconst selectedOption = document.getElementById('flightDropdown').options[document.getElementById('flightDropdown').selectedIndex];\n\t\t\tconst flightTitle = selectedOption.textContent.split(': ')[1]?.split(' (')[0] || 'Unknown Flight';\n\n\t\t\t// Show confirmation dialog\n\t\t\tconst confirmed = confirm(`Are you sure you want to delete the flight \"${flightTitle}\"?\\n\\nThis action cannot be undone and will permanently remove all flight data, markers, and related information.`);\n\t\t\t\n\t\t\tif (!confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst button = document.getElementById('deleteFlightButton');\n\t\t\tbutton.disabled = true;\n\t\t\tbutton.textContent = 'Deleting...';\n\n\t\t\tshowStatus('flightStatus', 'Deleting flight...', 'info');\n\n\t\t\tfetch(`/data-analysis/delete-flight?id=${flightId}`, {\n\t\t\t\tmethod: 'DELETE'\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif (data.status === 'success') {\n\t\t\t\t\tshowStatus('flightStatus', data.message, 'success');\n\t\t\t\t\t// Reload flights to refresh the list\n\t\t\t\t\tloadFlights();\n\t\t\t\t\t// Clear current flight data and hide sections\n\t\t\t\t\tcurrentFlightData = null;\n\t\t\t\t\tcurrentFlightId = null;\n\t\t\t\t\tcurrentMarkers = [];\n\t\t\t\t\tdocument.getElementById('controlsSection').style.display = 'none';\n\t\t\t\t\tdocument.getElementById('statisticsSection').style.display = 'none';\n\t\t\t\t\tdocument.getElementById('visualizationSection').style.display = 'none';\n\t\t\t\t} else {\n\t\t\t\t\tshowStatus('flightStatus', data.message || 'Failed to delete flight', 'error');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to delete flight: ' + error.message, 'error');\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tbutton.disabled = false;\n\t\t\t\tbutton.textContent = 'Delete Flight';\n\t\t\t});\n\t\t}\n\n\t\tfunction createTrimmedFlightFromMarkers() {\n\t\t\tconst flightId = document.getElementById('flightDropdown').value;\n\t\t\tconst newTitle = document.getElementById('trimmedFlightTitle').value.trim();\n\t\t\t\n\t\t\tif (!flightId) {\n\t\t\t\tshowStatus('flightStatus', 'No flight selected', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (!newTitle) {\n\t\t\t\tshowStatus('flightStatus', 'Please enter a name for the trimmed flight', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Find trim start and end markers\n\t\t\tconst trimStartMarker = currentMarkers.find(m => m.type === 'trim_start');\n\t\t\tconst trimEndMarker = currentMarkers.find(m => m.type === 'trim_end');\n\t\t\t\n\t\t\tif (!trimStartMarker || !trimEndMarker) {\n\t\t\t\tshowStatus('flightStatus', 'Both trim start and trim end markers are required', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (trimEndMarker.time - trimStartMarker.time < 1) {\n\t\t\t\tshowStatus('flightStatus', 'Trim range too small (minimum 1 second)', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconst button = document.getElementById('createTrimmedFlightButton');\n\t\t\tconst input = document.getElementById('trimmedFlightTitle');\n\t\t\tbutton.disabled = true;\n\t\t\tinput.disabled = true;\n\t\t\tbutton.textContent = 'Creating...';\n\t\t\t\n\t\t\tshowStatus('flightStatus', 'Creating trimmed flight...', 'info');\n\t\t\t\n\t\t\tfetch('/data-analysis/trim-flight', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tflight_id: parseInt(flightId),\n\t\t\t\t\tnew_title: newTitle,\n\t\t\t\t\tstart_time: trimStartMarker.time,\n\t\t\t\t\tend_time: trimEndMarker.time\n\t\t\t\t})\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif (data.status === 'success') {\n\t\t\t\t\tshowStatus('flightStatus', data.message, 'success');\n\t\t\t\t\t// Reload flights to show the new trimmed flight\n\t\t\t\t\tloadFlights();\n\t\t\t\t\t// Clear the input field\n\t\t\t\t\tinput.value = '';\n\t\t\t\t} else {\n\t\t\t\t\tshowStatus('flightStatus', data.message || 'Failed to create trimmed flight', 'error');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tshowStatus('flightStatus', 'Failed to create trimmed flight: ' + error.message, 'error');\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tbutton.disabled = false;\n\t\t\t\tinput.disabled = false;\n\t\t\t\tbutton.textContent = 'Create Trimmed Flight';\n\t\t\t});\n\t\t}\n\n\t\tfunction showStatus(elementId, message, type) {\n\t\t\tconst element = document.getElementById(elementId);\n\t\t\telement.innerHTML = `<div class=\"status ${type}\">${message}</div>`;\n\t\t}\n\n\t\tfunction exportFlightData(format) {\n\t\t\tconst flightId = document.getElementById('flightDropdown').value;\n\t\t\tif (!flightId) {\n\t\t\t\tshowStatus('flightStatus', 'Please select a flight first', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Show export in progress\n\t\t\tconst buttonId = format === 'airspeed-altitude' ? 'exportAirspeedAltitudeButton' : 'exportFullDataButton';\n\t\t\tconst button = document.getElementById(buttonId);\n\t\t\tconst originalText = button.textContent;\n\t\t\tbutton.disabled = true;\n\t\t\tbutton.textContent = 'Exporting...';\n\n\t\t\t// Create download URL\n\t\t\tconst url = `/data-analysis/export-csv?flightId=${flightId}&format=${format}`;\n\t\t\t\n\t\t\t// Create a temporary link and trigger download\n\t\t\tconst link = document.createElement('a');\n\t\t\tlink.href = url;\n\t\t\tlink.download = ''; // Let the server set the filename via Content-Disposition\n\t\t\tdocument.body.appendChild(link);\n\t\t\tlink.click();\n\t\t\tdocument.body.removeChild(link);\n\n\t\t\t// Reset button state\n\t\t\tsetTimeout(() => {\n\t\t\t\tbutton.disabled = false;\n\t\t\t\tbutton.textContent = originalText;\n\t\t\t\tshowStatus('flightStatus', `CSV export started for ${format === 'airspeed-altitude' ? 'Airspeed & Altitude' : 'Full Flight Data'}`, 'success');\n\t\t\t}, 1000);\n\t\t}\n\n\t\tfunction loadStatistics(flightId) {\n\t\t\tfetch(`/data-analysis/statistics?flightId=${flightId}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(statistics => {\n\t\t\t\tdisplayStatistics(statistics);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Failed to load statistics:', error);\n\t\t\t\tdocument.getElementById('statisticsContent').innerHTML = '<p class=\"error\">Failed to load statistics.</p>';\n\t\t\t});\n\t\t}\n\n\t\tfunction displayStatistics(statistics) {\n\t\t\tconst container = document.getElementById('statisticsContent');\n\t\t\t\n\t\t\tif (!statistics || Object.keys(statistics).length === 0) {\n\t\t\t\tcontainer.innerHTML = '<p>No statistics available for this flight.</p>';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet html = '<div class=\"statistics-container\">';\n\n\t\t\tfor (const [aircraftLabel, stats] of Object.entries(statistics)) {\n\t\t\t\thtml += `<div class=\"aircraft-stats\">\n\t\t\t\t\t<h4>${aircraftLabel}</h4>`;\n\n\t\t\t\t// Airspeed Statistics\n\t\t\t\tif (stats.airspeed_stats) {\n\t\t\t\t\thtml += `<h5>Airspeed (knots)</h5>\n\t\t\t\t\t<table class=\"stats-table\">\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Count</td><td class=\"metric-value\">${stats.airspeed_stats.count}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Mean</td><td class=\"metric-value\">${stats.airspeed_stats.mean.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr class=\"variance-highlight\"><td class=\"metric-name\">Variance</td><td class=\"metric-value\">${stats.airspeed_stats.variance.toFixed(4)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Std Deviation</td><td class=\"metric-value\">${stats.airspeed_stats.std_dev.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Min</td><td class=\"metric-value\">${stats.airspeed_stats.min.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Max</td><td class=\"metric-value\">${stats.airspeed_stats.max.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Range</td><td class=\"metric-value\">${stats.airspeed_stats.range.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Median</td><td class=\"metric-value\">${stats.airspeed_stats.median.toFixed(2)}</td></tr>\n\t\t\t\t\t</table><br>`;\n\t\t\t\t}\n\n\t\t\t\t// Indicated Altitude Statistics\n\t\t\t\tif (stats.indicated_altitude_stats) {\n\t\t\t\t\thtml += `<h5>Indicated Altitude (feet)</h5>\n\t\t\t\t\t<table class=\"stats-table\">\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Count</td><td class=\"metric-value\">${stats.indicated_altitude_stats.count}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Mean</td><td class=\"metric-value\">${stats.indicated_altitude_stats.mean.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr class=\"variance-highlight\"><td class=\"metric-name\">Variance</td><td class=\"metric-value\">${stats.indicated_altitude_stats.variance.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Std Deviation</td><td class=\"metric-value\">${stats.indicated_altitude_stats.std_dev.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Min</td><td class=\"metric-value\">${stats.indicated_altitude_stats.min.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Max</td><td class=\"metric-value\">${stats.indicated_altitude_stats.max.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Range</td><td class=\"metric-value\">${stats.indicated_altitude_stats.range.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Median</td><td class=\"metric-value\">${stats.indicated_altitude_stats.median.toFixed(0)}</td></tr>\n\t\t\t\t\t</table><br>`;\n\t\t\t\t}\n\n\t\t\t\t// MSL Altitude Statistics\n\t\t\t\tif (stats.altitude_stats) {\n\t\t\t\t\thtml += `<h5>MSL Altitude (feet)</h5>\n\t\t\t\t\t<table class=\"stats-table\">\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Count</td><td class=\"metric-value\">${stats.altitude_stats.count}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Mean</td><td class=\"metric-value\">${stats.altitude_stats.mean.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr class=\"variance-highlight\"><td class=\"metric-name\">Variance</td><td class=\"metric-value\">${stats.altitude_stats.variance.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Std Deviation</td><td class=\"metric-value\">${stats.altitude_stats.std_dev.toFixed(2)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Min</td><td class=\"metric-value\">${stats.altitude_stats.min.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Max</td><td class=\"metric-value\">${stats.altitude_stats.max.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Range</td><td class=\"metric-value\">${stats.altitude_stats.range.toFixed(0)}</td></tr>\n\t\t\t\t\t\t<tr><td class=\"metric-name\">Median</td><td class=\"metric-value\">${stats.altitude_stats.median.toFixed(0)}</td></tr>\n\t\t\t\t\t</table>`;\n\t\t\t\t}\n\n\t\t\t\thtml += '</div>';\n\t\t\t}\n\n\t\t\thtml += '</div>';\n\t\t\tcontainer.innerHTML = html;\n\t\t}\n\n\t\tfunction toggleAccordion(accordionId) {\n\t\t\tconst content = document.getElementById(accordionId);\n\t\t\tconst icon = document.getElementById(accordionId + 'Icon');\n\t\t\t\n\t\t\tif (content.classList.contains('open')) {\n\t\t\t\tcontent.classList.remove('open');\n\t\t\t\ticon.classList.remove('rotated');\n\t\t\t\ticon.textContent = '▼';\n\t\t\t} else {\n\t\t\t\tcontent.classList.add('open');\n\t\t\t\ticon.classList.add('rotated');\n\t\t\t\ticon.textContent = '▲';\n\t\t\t}\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
