// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.887
package programs

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"theme-color\" content=\"#3b82f6\"><meta name=\"apple-mobile-web-app-capable\" content=\"yes\"><meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\"><meta name=\"apple-mobile-web-app-title\" content=\"OpStation\"><link rel=\"manifest\" href=\"/manifest.json\"><link rel=\"apple-touch-icon\" href=\"/icons/icon-192x192.png\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 15, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><script src=\"https://cdn.tailwindcss.com\"></script><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><style>\n\t\t\t\t.notification {\n\t\t\t\t\tposition: fixed;\n\t\t\t\t\ttop: 1rem;\n\t\t\t\t\tright: 1rem;\n\t\t\t\t\tpadding: 1rem 1.5rem;\n\t\t\t\t\tborder-radius: 0.5rem;\n\t\t\t\t\tbox-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\ttransition: all 0.3s ease-in-out;\n\t\t\t\t}\n\t\t\t\t.notification.success {\n\t\t\t\t\tbackground-color: #10b981;\n\t\t\t\t\tcolor: white;\n\t\t\t\t}\n\t\t\t\t.notification.error {\n\t\t\t\t\tbackground-color: #ef4444;\n\t\t\t\t\tcolor: white;\n\t\t\t\t}\n\t\t\t\t.htmx-indicator {\n\t\t\t\t\topacity: 0;\n\t\t\t\t\ttransition: opacity 300ms ease-in;\n\t\t\t\t}\n\t\t\t\t.htmx-request .htmx-indicator {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t\t.htmx-request.htmx-indicator {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t</style></head><body class=\"bg-gray-100 min-h-screen p-8\" hx-boost=\"true\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- Notification Container --><div id=\"notification-container\"></div><!-- Wake Lock Script --><script>\n\t\t\t\t// Initialize wake lock\n\t\t\t\tlet wakeLock = null;\n\n\t\t\t\tasync function enableWakeLock() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twakeLock = await navigator.wakeLock.request('screen');\n\t\t\t\t\t\tconsole.log('Wake Lock is active');\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error('Wake Lock error:', err);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Enable wake lock when the page loads\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', async () => {\n\t\t\t\t\tawait enableWakeLock();\n\t\t\t\t});\n\n\t\t\t\t// Handle visibility change\n\t\t\t\tdocument.addEventListener('visibilitychange', async () => {\n\t\t\t\t\tif (document.visibilityState === 'visible') {\n\t\t\t\t\t\tawait enableWakeLock();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Show notifications\n\t\t\t\tfunction showNotification(message, type = 'success') {\n\t\t\t\t\tconst container = document.getElementById('notification-container');\n\t\t\t\t\tconst notification = document.createElement('div');\n\t\t\t\t\tnotification.className = \"notification \" + type;\n\t\t\t\t\tnotification.textContent = message;\n\t\t\t\t\tcontainer.appendChild(notification);\n\t\t\t\t\t\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tnotification.remove();\n\t\t\t\t\t}, 3000);\n\t\t\t\t}\n\n\t\t\t\t// Handle HTMX events for notifications\n\t\t\t\tdocument.addEventListener('htmx:responseError', (e) => {\n\t\t\t\t\tshowNotification('Request failed', 'error');\n\t\t\t\t});\n\n\t\t\t\tdocument.addEventListener('htmx:afterRequest', (e) => {\n\t\t\t\t\tif (e.detail.successful && e.detail.xhr.status === 200) {\n\t\t\t\t\t\tconst action = e.detail.requestConfig.verb;\n\t\t\t\t\t\tconst path = e.detail.requestConfig.path;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (path.includes('/launch')) {\n\t\t\t\t\t\t\tshowNotification('Program launched successfully');\n\t\t\t\t\t\t} else if (path.includes('/kill')) {\n\t\t\t\t\t\t\tshowNotification('Program terminated successfully');\n\t\t\t\t\t\t} else if (path.includes('/manual-event')) {\n\t\t\t\t\t\t\tshowNotification('Event recorded successfully');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
