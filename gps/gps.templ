package gps

import "fmt"

templ degreesToDMSTemplate(degrees float64, isLatitude bool) {
	{ degreesToDMS(degrees, isLatitude) }
}

templ GPSPosition(position *Position) {
	if position != nil {
		<div class="grid grid-cols-2 gap-4">
			<div>
				<span class="text-sm text-gray-600">Latitude:</span>
				<span class="font-mono">@degreesToDMSTemplate(position.Latitude, true)</span>
			</div>
			<div>
				<span class="text-sm text-gray-600">Longitude:</span>
				<span class="font-mono">@degreesToDMSTemplate(position.Longitude, false)</span>
			</div>
			<div>
				<span class="text-sm text-gray-600">Altitude:</span>
				<span class="font-mono">{ fmt.Sprintf("%.1fm", position.Altitude) }</span>
			</div>
			<div>
				<span class="text-sm text-gray-600">Last Update:</span>
				<span class="font-mono">{ position.Timestamp.Format("15:04:05") }</span>
			</div>
		</div>
	} else {
		<div class="text-gray-500">Waiting for GPS data...</div>
	}
}

templ GPSConfig(config *Config) {
	<div class="mb-4 p-3 bg-gray-50 rounded-lg">
		<h4 class="text-sm font-medium text-gray-700 mb-2">GPS Sending Configuration</h4>
		<div class="grid grid-cols-1 gap-4">
			<div>
				<label class="block text-sm font-medium text-gray-700">Target IP Address</label>
				<div class="mt-1 flex gap-2">
					<input
						type="text"
						id="targetIP"
						name="target_ip"
						value={ config.TargetIP }
						placeholder="Enter target IP address"
						pattern="^(\d{1,3}\.){3}\d{1,3}$"
						class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
					/>
					<button
						hx-post="/gps/set-target-ip"
						hx-include="#targetIP"
						hx-target="#gps-config"
						hx-swap="innerHTML"
						class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
					>
						<span class="htmx-indicator">ðŸ”„</span>
						Set IP
					</button>
				</div>
				if config.TargetIP != "" {
					<div class="mt-1 text-sm text-gray-600">Current Target IP: { config.TargetIP }</div>
				} else {
					<div class="mt-1 text-sm text-gray-600">No target IP configured</div>
				}
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700">Distance Threshold (nautical miles)</label>
				<input
					type="number"
					id="distance-threshold"
					name="distance_threshold"
					value={ fmt.Sprintf("%.1f", config.DistanceThreshold) }
					step="0.1"
					hx-post="/gps/set-distance-threshold"
					hx-trigger="change"
					hx-target="#gps-config"
					hx-swap="innerHTML"
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
				/>
			</div>
			<div id="broadcast-status">
				@BroadcastToggle(config.IsSending)
			</div>
		</div>
	</div>
}

templ BroadcastToggle(isSending bool) {
	<button
		hx-post="/gps/broadcast-toggle"
		hx-target="#broadcast-status"
		hx-swap="outerHTML"
		class={ "w-full px-4 py-2 text-white rounded transition-colors", templ.KV("bg-green-500 hover:bg-green-600", isSending), templ.KV("bg-red-500 hover:bg-red-600", !isSending) }
	>
		<span class="htmx-indicator">ðŸ”„</span>
		if isSending {
			Sending to Target IP
		} else {
			Not Sending to Target IP
		}
	</button>
}
